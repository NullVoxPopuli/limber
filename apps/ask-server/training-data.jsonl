{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"A component that renders some static markup isn't very interesting.\nLet's add some data.\n\nFirst, define a local variable:\n\n```gjs\nlet name = \"world\";\n\n<template>\n  <h1>Hello World</h1>\n</template>\n```\n\nThen, we can refer to `name` in the markup:\n\n```hbs\n<h1>Hello {{name}}</h1>\n```\n\nInside the curly braces, we can put any _reference_ we want.\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let name = \"world\";\n\n<template>\n  <h1>Hello World</h1>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let name = \"world\";\n\n<template>\n  <h1>Hello {{name}}</h1>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let name = \"world\";\n\n<template>\n  <h1>Hello {{name}}</h1>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"A function can transform any data from a template.\n\nLet's try defining a function\n\n```gjs\nlet name = \"world\";\nlet shout = (text) => text.toUpperCase();\n\n<template>\n  <h1>Hello {{name}}</h1>\n</template>\n```\n\nThen, we can call that function\n\n```hbs\n<h1>Hello {{(shout name)}}</h1>\n```\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let name = \"world\";\nlet shout = (text) => text.toUpperCase(); \n\n<template>\n  <h1>Hello World</h1>\n</template>\n\n\"\"\", the user should be able to come up with this final working code: \"\"\"let name = \"world\";\nlet shout = (text) => text.toUpperCase(); \n\n<template>\n  <h1>Hello {{ (shout name) }}</h1>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let name = \"world\";\nlet shout = (text) => text.toUpperCase(); \n\n<template>\n  <h1>Hello {{ (shout name) }}</h1>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Functions can be chained together, just like in other languages\n\nDefine another function\n\n```gjs\nlet name = \"world\";\nlet shout = (text) => text.toUpperCase();\nlet reverse = (text) => text.split('').reverse().join('');\n\n<template>\n  <h1>Hello {{ (shout name) }}</h1>\n</template>\n```\n\nThen, we can chain the function:\n\n```hbs\n<h1>Hello {{(reverse (shout name))}}</h1>\n```\n\nUnlike JavaScript, Ember and Glimmer templates use [Polish Notation][polish] or\n_Prefix Notation_ which means that functions _precede_ their arguments.\nThis simple language allows templates to be transformed into lightweight JSON\nobjects to save bytes during network transfer and time during the browser's\nparse and evaluation phases. For more information, see this [announcement video][secrets]\n\n[polish]: https://en.wikipedia.org/wiki/Polish_notation\n[secrets]: https://www.youtube.com/watch?v=nXCSloXZ-wc\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let name = \"world\";\nlet shout = (text) => text.toUpperCase();\nlet reverse = (text) => text.split('').reverse().join('');\n\n<template>\n  <h1>Hello {{ (shout name) }}</h1>\n</template>\n\n\"\"\", the user should be able to come up with this final working code: \"\"\"let name = \"world\";\nlet shout = (text) => text.toUpperCase(); \nlet reverse = (text) => text.split('').reverse().join('');\n\n<template>\n  <h1>Hello {{ (reverse (shout name) )}}</h1>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let name = \"world\";\nlet shout = (text) => text.toUpperCase(); \nlet reverse = (text) => text.split('').reverse().join('');\n\n<template>\n  <h1>Hello {{ (reverse (shout name) )}}</h1>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Similarly as data can be renderd within curly braces, curly braces can be used to control the values of element attributes.\n\nLet's create an image with dynamic `src` and `alt` attributes.\n\n```hbs\n<img src={{gifURL}} />\n```\n\nIn a real dev environment, you'll be required to specify an `alt` description.\nWithout the `alt` description, users with slow or unstable internet connections,\nmay not be able to download the image -- users who rely on screen readers won't be able to view the image either.  \nDefining the `alt` description solves these problems.\nMore information about this requirement is described on [the linter docs][gh-etl-alt].\n\n```hbs\n<img src={{gifURL}} alt={{description}} />\n```\n\n[gh-etl-alt]: https://github.com/ember-template-lint/ember-template-lint/blob/b4433e9439f3c555b3c4beb56c34bfed18a423b5/docs/rule/require-valid-alt-text.md\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let gifURL = 'https://media.tenor.com/GAMYf3psisEAAAAd/hamster-spinning.gif';\nlet description = 'A hamster is spinning within a fallen wheel';\n\n<template>\n  <img>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let gifURL = 'https://media.tenor.com/GAMYf3psisEAAAAd/hamster-spinning.gif';\nlet description = 'A hamster is spinning within a fallen wheel';\n\n<template>\n  <img src={{gifURL}} alt={{description}} >\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let gifURL = 'https://media.tenor.com/GAMYf3psisEAAAAd/hamster-spinning.gif';\nlet description = 'A hamster is spinning within a fallen wheel';\n\n<template>\n  <img src={{gifURL}} alt={{description}} >\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"All functions available on [`globalThis`][mdn-globalThis] ([window][mdn-Window] in browsers), are available to use in templates.\n\nFor example, retrieving data from [`localStorage`][mdn-LocalStorage] may be done like this:\n\n```hbs\n{{localStorage.getItem 'the-key'}}\n```\n\nAnd likewise, if we have data we need to format with [`JSON.stringify`][mdn-json-stringify], that would look like:\n\n```hbs\n<pre><code>{{JSON.stringify data null '\\t'}}</code></pre>\n```\n\nThe same [polish][polish] notation we used early applies to all globally available functions -- so the above `stringify` call would like like this, if in JS: `JSON.stringify(data, null, \"\\t\")`\n\nNote that due to how polish notation reads, it's _highly encouraged_ to extract one-off utility functions instead of wrapping more functions in the template.\n\nFor example:\n\n```gjs\nfunction formatFromStorage(key) {\n  let stored = localStorage.getItem(key);\n  let parsed = stored ? JSON.parse(stored) : {};\n\n  return JSON.stringify(parsed, null, '\\t');\n}\n\n<template>\n  <pre><code>{{formatFromStorage \"the-key\"}}</code></pre>\n</template>\n```\n\nSince templates are the _source of truth_ for what is visible to users, it's useful to make them as readable as possible. An extra advantage here is that the extracted functions can more easily be unit tested.\n\n[mdn-globalThis]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n[mdn-Window]: https://developer.mozilla.org/en-US/docs/Web/API/Window\n[mdn-LocalStorage]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n[mdn-json-stringify]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n[polish]: https://en.wikipedia.org/wiki/Polish_notation\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let data = {\n  name: \"Tatooine\",\n  gravity: \"1 standard\",\n  terrain: \"desert\",\n};\n\nlocalStorage.setItem('localStorage-item', JSON.stringify(data));\n\n// Pending update to GlimmerVM that does this automatically\nlet getItem = localStorage.getItem.bind(localStorage);\n\n<template>\n  From localStorage: <br>\n  <pre>{{\"localStorage-item\"}}</pre>\n\n  Formatted: <br>\n  <pre><code>{{data}}</code></pre>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let data = {\n  name: \"Tatooine\",\n  gravity: \"1 standard\",\n  terrain: \"desert\",\n};\n\nlocalStorage.setItem('localStorage-item', JSON.stringify(data));\n\n// Pending update to GlimmerVM that does this automatically\nlet getItem = localStorage.getItem.bind(localStorage);\n\n<template>\n  From localStorage: <br>\n  <pre>{{getItem \"localStorage-item\"}}</pre>\n\n  Formatted: <br>\n  <pre><code>{{JSON.stringify data null \"\\t\"}}</code></pre>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let data = {\n  name: \"Tatooine\",\n  gravity: \"1 standard\",\n  terrain: \"desert\",\n};\n\nlocalStorage.setItem('localStorage-item', JSON.stringify(data));\n\n// Pending update to GlimmerVM that does this automatically\nlet getItem = localStorage.getItem.bind(localStorage);\n\n<template>\n  From localStorage: <br>\n  <pre>{{getItem \"localStorage-item\"}}</pre>\n\n  Formatted: <br>\n  <pre><code>{{JSON.stringify data null \"\\t\"}}</code></pre>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"`RemoteData` is a utility `Resource` from [ember-resources][gh-resources]\nthat provides an easy way to interact with [`fetch`][mdn-fetch]\nwith a pre-wired [`AbortController`][mdn-AbortController].\n\n`RemoteData` has two supported uses,\n\n- from a template\n\n  ```hbs\n  {{#let (RemoteData '...url...') as |request|}}\n    isLoading:\n    {{request.isLoading}}\n    data:\n    {{request.value}}\n  {{/let}}\n  ```\n\n- or within a stateful component class\n\n  ```gjs\n  class Demo extends Component {\n    @use request = RemoteData(() => `... url ... `);\n\n    <template>\n      isLoading: {{this.request.isLoading}}\n      data: {{this.request.value}}\n    </template>\n  }\n  ```\n\nIn this example, the fetching of data from the [StarWars API][swapi]\nshould occur automatically based on changes to the url passed to `RemoteData`.\nYou can change the `id` of the Person in the text field to fetch from the StarWars API.\n\nDocs for `RemoteData` can [be found here][docs-remote-data].\nInformation about how Resources fit in to the next edition of Ember can be [found here][polaris-reactivity]\n\n[gh-resources]: https://github.com/nullvoxpopuli/ember-resources\n[mdn-fetch]: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n[mdn-AbortController]: https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n[docs-remote-data]: https://ember-resources.pages.dev/modules/util_remote_data\n[polaris-reactivity]: https://wycats.github.io/polaris-sketchwork/reactivity.html\n[swapi]: https://swapi.dev/\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nimport { RemoteData } from 'ember-resources/util/remote-data';\n\nconst urlFor = (id) => `https://swapi.dev/api/people/${id}`;\n\nconst Person = <template>\n  {{! Use remote data here }}\n</template>\n\nexport default class Demo extends Component {\n  @tracked id = 51;\n  updateId = (event) => this.id = event.target.value;\n\n  <template>\n    <div class=\"border p-4 grid gap-4\">\n      <Person @id={{this.id}} />\n\n      <label>\n        Person ID\n        <input\n          type='number'\n          class='border px-3 py-2'\n          value={{this.id}}\n          {{on 'input' this.updateId}}>\n      </label>\n    </div>\n  </template>\n}\n\"\"\", the user should be able to come up with this final working code: \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nimport { RemoteData } from 'ember-resources/util/remote-data';\n\nconst urlFor = (id) => `https://swapi.dev/api/people/${id}`;\n\nconst Person = <template>\n  {{#let (RemoteData (urlFor @id)) as |request|}}\n    {{#if request.isLoading}}\n      ... loading {{@id}} ...\n    {{else if request.value}}\n      {{request.value.name}}\n    {{/if}}\n  {{/let}}\n</template>\n\nexport default class Demo extends Component {\n  @tracked id = 51;\n  updateId = (event) => this.id = event.target.value;\n\n  <template>\n    <div class=\"border p-4 grid gap-4\">\n      <Person @id={{this.id}} />\n\n      <label>\n        Person ID\n        <input\n          type='number'\n          class='border px-3 py-2'\n          value={{this.id}}\n          {{on 'input' this.updateId}}>\n      </label>\n    </div>\n  </template>\n}\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nimport { RemoteData } from 'ember-resources/util/remote-data';\n\nconst urlFor = (id) => `https://swapi.dev/api/people/${id}`;\n\nconst Person = <template>\n  {{#let (RemoteData (urlFor @id)) as |request|}}\n    {{#if request.isLoading}}\n      ... loading {{@id}} ...\n    {{else if request.value}}\n      {{request.value.name}}\n    {{/if}}\n  {{/let}}\n</template>\n\nexport default class Demo extends Component {\n  @tracked id = 51;\n  updateId = (event) => this.id = event.target.value;\n\n  <template>\n    <div class=\"border p-4 grid gap-4\">\n      <Person @id={{this.id}} />\n\n      <label>\n        Person ID\n        <input\n          type='number'\n          class='border px-3 py-2'\n          value={{this.id}}\n          {{on 'input' this.updateId}}>\n      </label>\n    </div>\n  </template>\n}\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"State can be shared between components without explicitly passing the state to each componeent.\nThis can is one way in which _[prop-drilling][prop-drilling]_ can be avoided.\n\nIn Ember/Glimmer, we lean on the native capabilities of browsers to manage state, and this often takes the form of a `class` for helpfully encapsulating related behaviors.\n\n```js\nclass Count {\n  @tracked value;\n\n  decrement = () => this.value--;\n  increment = () => this.value++;\n}\n\nlet count = new Count();\n```\n\nNote that the only framework-specific instrumentation that we need is the `@tracked` decorator.\n\nWe can the use this `count` immediately in our components:\n\n```hbs\n<button {{on 'click' count.increment}}>\n  Increment (+)\n</button>\n```\n\nIn the provided example, implement `increment`, `decrement`, and `reset`.\n\nIn a real app, these components could all live in separate files and import the `count`.\n\n[prop-drilling]: https://kentcdodds.com/blog/prop-drilling\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass Count {\n  @tracked value = 0;\n\n  // TODO: implement these methods\n  decrement = () => {}\n  increment = () => {}\n  reset = () => {}\n}\n\nlet count = new Count();\n\nlet Incrementer = <template>\n  <button {{on \"click\" count.increment}}>+</button>\n</template>;\n\nlet Decrementer = <template>\n  <button {{on \"click\" count.decrement}}>-</button>\n</template>;\n\nlet Resetter = <template>\n  <button {{on \"click\" count.reset}}>Reset</button>\n</template>;\n\n\n<template>\n  <h1>The count is {{count.value}}</h1>\n\n  <Incrementer />\n  <Decrementer />\n  <Resetter />\n</template>\n\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass Count {\n  @tracked value = 0;\n\n  decrement = () => this.value--;\n  increment = () => this.value++;\n  reset = () => this.value = 0;\n}\n\nlet count = new Count();\n\nlet Incrementer = <template>\n  <button {{on \"click\" count.increment}}>+</button>\n</template>;\n\nlet Decrementer = <template>\n  <button {{on \"click\" count.decrement}}>-</button>\n</template>;\n\nlet Resetter = <template>\n  <button {{on \"click\" count.reset}}>Reset</button>\n</template>;\n\n\n<template>\n  <h1>The count is {{count.value}}</h1>\n\n  <Incrementer />\n  <Decrementer />\n  <Resetter />\n</template>\n\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass Count {\n  @tracked value = 0;\n\n  decrement = () => this.value--;\n  increment = () => this.value++;\n  reset = () => this.value = 0;\n}\n\nlet count = new Count();\n\nlet Incrementer = <template>\n  <button {{on \"click\" count.increment}}>+</button>\n</template>;\n\nlet Decrementer = <template>\n  <button {{on \"click\" count.decrement}}>-</button>\n</template>;\n\nlet Resetter = <template>\n  <button {{on \"click\" count.reset}}>Reset</button>\n</template>;\n\n\n<template>\n  <h1>The count is {{count.value}}</h1>\n\n  <Incrementer />\n  <Decrementer />\n  <Resetter />\n</template>\n\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"[`localStorage`][mdn-localStorage] is a way to store string-based data outside your application so that it may be accessed later. This data will persist between refreshes, so it could be useful for restoring user data when they navigate away from your app and come back later.\n\nTo use `localStorage`, and maintain reactivity, you'll need to manage a local reactive value, as well as utilize the `localStorage` APIs.\n\n```js\nclass Demo extends Component {\n  @tracked _count = 0;\n\n  get count() {\n    let fromStorage = parseInt(localStorage.getItem('count')) ?? 0;\n    return this._count || fromStorage;\n  }\n  set count(value) {\n    localStorage.setItem('count', value ?? 0);\n    this._count = value;\n  }\n}\n```\n\nThis technique uses the native [get][mdn-get] and [set][mdn-set] behaviors of JavaScript, allowing you to (in a way), intercept how `_count` gets read and set. This is similar to how `@tracked` works under the hood with the reactive value primitives.\n\nThis tutorial does not (yet) store your in-progress work, so go-ahead and click the \"show me\" button below, click the button in the output pane a few times, and refresh the page.\n\n[mdn-localStorage]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n[mdn-get]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\n[mdn-set]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nexport default class Demo extends Component {\n  @tracked count = 0;\n\n  increment = () => this.count += 1;\n\n  <template>\n    <p>You have clicked the button {{this.count}} times.</p>\n\n    <button {{on \"click\" this.increment}}>Click</button>\n  </template>\n}\n\"\"\", the user should be able to come up with this final working code: \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nexport default class Demo extends Component {\n  @tracked _count = 0;\n\n  get count() {\n    let fromStorage = parseInt(localStorage.getItem('count')) ?? 0;\n    return this._count || fromStorage || 0;\n  }\n  set count(value) {\n    localStorage.setItem('count', value ?? 0);\n    this._count = value;\n  }\n\n  increment = () => this.count += 1;\n\n  <template>\n    <p>You have clicked the button {{this.count}} times.</p>\n\n    <button {{on \"click\" this.increment}}>Click</button>\n  </template>\n}\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nexport default class Demo extends Component {\n  @tracked _count = 0;\n\n  get count() {\n    let fromStorage = parseInt(localStorage.getItem('count')) ?? 0;\n    return this._count || fromStorage || 0;\n  }\n  set count(value) {\n    localStorage.setItem('count', value ?? 0);\n    this._count = value;\n  }\n\n  increment = () => this.count += 1;\n\n  <template>\n    <p>You have clicked the button {{this.count}} times.</p>\n\n    <button {{on \"click\" this.increment}}>Click</button>\n  </template>\n}\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"The `keepLatest` utility resource allows you to hang on to a stable reference to data while new data loads.\n\nThis can be useful for improving user experience across sites with data that takes some time to fetch or just paginated data in general.\n\n_Typically, users don't want to see the UI flashing a bunch of different states_.\nThe more stable we can keep the UI, and defer to subtle / polite indicators of progress, the better. We are kinder to the visual stimulous we put our users through.\n\n`keepLatest` _only_ works in a component's class for now, but it looks like this:\n\n```js\nclass Demo extends Component {\n  @use request = RemoteData(() => urlFor(this.id));\n  @use latest = keepLatest({\n    value: () => this.request.value,\n    when: () => this.request.isLoading,\n  });\n\n  // ...\n}\n```\n\nAnd this is read as \"Keep the latest `value` from changing `when` `this.request.isLoading`.\nDuring an initial request `latest` will be null, and for all subsequent requests, it'll be whatever the the value of `request`'s most recent successful value was.\n\nIn this exercise, wire up the `keepLatest` utility so that when the `id` changes, triggering `RemoteData` to make a new request, the async loading state is subtle.\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nimport { use, resource } from 'ember-resources';\nimport { RemoteData, remoteData } from 'ember-resources/util/remote-data';\nimport { keepLatest } from 'ember-resources/util/keep-latest';\n\nconst isEmpty = (x) => !x || x?.length === 0;\nconst urlFor = (id) => `https://swapi.dev/api/people/${id}`;\n\nconst PersonInfo = <template>\n  <fieldset class=\"border px-4\">\n    <legend>{{@person.url}}</legend>\n    <pre><code class=\"language-json\">{{JSON.stringify @person null \"\\t\"}}</code></pre>\n  </fieldset>\n</template>;\n\nexport default class Demo extends Component {\n  @tracked id = 51;\n  updateId = (event) => this.id = event.target.value;\n\n  @use request = RemoteData(() => urlFor(this.id));\n\n  // TODO: replace this with the keepLatest utility\n  get latest() {\n    return this.request.value;\n  }\n\n  <template>\n    <div id=\"demo\">\n      <label>\n        Person ID\n        <input type='number' value={{this.id}} {{on 'input' this.updateId}}>\n      </label>\n\n\n      {{! We either have an initial value, or we don't }}\n      {{#if this.latest}}\n\n        <div id=\"async-state\">\n          {{! Async state for subsequent requests, only}}\n          {{#if this.request.isPending}}\n             ... loading ...\n          {{else if this.request.isRejected}}\n             error!\n          {{/if}}\n        </div>\n\n        <PersonInfo @person={{this.latest}} />\n      {{else}}\n        {{! This block only matters during the initial request }}\n\n        {{#if this.rejest.isRejected}}\n          error loading initial data!\n        {{else}}\n          <pre> ... loading ... </pre>\n        {{/if}}\n\n      {{/if}}\n    </div>\n    <style>\n      #demo { \n        position: relative; max-width: 30rem; \n        border: 1px solid;\n        padding: 1rem;\n      }\n      #demo input { max-width: 6rem; border: 1px solid; padding: 0.5rem 0.75rem; }\n      #async-state { display: inline-block; margin-left: 1rem; }\n    </style>\n  </template>\n}\n\"\"\", the user should be able to come up with this final working code: \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nimport { use, resource } from 'ember-resources';\nimport { RemoteData, remoteData } from 'ember-resources/util/remote-data';\nimport { keepLatest } from 'ember-resources/util/keep-latest';\n\nconst isEmpty = (x) => !x || x?.length === 0;\nconst urlFor = (id) => `https://swapi.dev/api/people/${id}`;\n\nconst PersonInfo = <template>\n  <fieldset class=\"border px-4\">\n    <legend>{{@person.url}}</legend>\n    <pre><code>{{JSON.stringify @person null \"\\t\"}}</code></pre>\n  </fieldset>\n</template>;\n\nexport default class Demo extends Component {\n  @tracked id = 51;\n  updateId = (event) => this.id = event.target.value;\n\n  @use request = RemoteData(() => urlFor(this.id));\n  @use latest = keepLatest({\n    value: () => this.request.value,\n    when: () => this.request.isLoading,\n  });\n\n  <template>\n    <div id=\"demo\">\n      <label>\n        Person ID\n        <input type='number' value={{this.id}} {{on 'input' this.updateId}} >\n      </label>\n\n      {{! We either have an initial value, or we don't }}\n      {{#if this.latest}}\n\n        <div id=\"async-state\">\n          {{! Async state for subsequent requests, only}}\n          {{#if this.request.isPending}}\n             ... loading ...\n          {{else if this.request.isRejected}}\n             error!\n          {{/if}}\n        </div>\n\n        <PersonInfo @person={{this.latest}} />\n      {{else}}\n        {{! This block only matters during the initial request }}\n\n        {{#if this.rejest.isRejected}}\n          error loading initial data!\n        {{else}}\n          <pre> ... loading ... </pre>\n        {{/if}}\n\n      {{/if}}\n    </div>\n    <style>\n      #demo { \n        position: relative; max-width: 30rem; \n        border: 1px solid;\n        padding: 1rem;\n      }\n      #demo input { max-width: 6rem; border: 1px solid; padding: 0.5rem 0.75rem; }\n      #async-state { display: inline-block; margin-left: 1rem; }\n    </style>\n  </template>\n}\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nimport { use, resource } from 'ember-resources';\nimport { RemoteData, remoteData } from 'ember-resources/util/remote-data';\nimport { keepLatest } from 'ember-resources/util/keep-latest';\n\nconst isEmpty = (x) => !x || x?.length === 0;\nconst urlFor = (id) => `https://swapi.dev/api/people/${id}`;\n\nconst PersonInfo = <template>\n  <fieldset class=\"border px-4\">\n    <legend>{{@person.url}}</legend>\n    <pre><code>{{JSON.stringify @person null \"\\t\"}}</code></pre>\n  </fieldset>\n</template>;\n\nexport default class Demo extends Component {\n  @tracked id = 51;\n  updateId = (event) => this.id = event.target.value;\n\n  @use request = RemoteData(() => urlFor(this.id));\n  @use latest = keepLatest({\n    value: () => this.request.value,\n    when: () => this.request.isLoading,\n  });\n\n  <template>\n    <div id=\"demo\">\n      <label>\n        Person ID\n        <input type='number' value={{this.id}} {{on 'input' this.updateId}} >\n      </label>\n\n      {{! We either have an initial value, or we don't }}\n      {{#if this.latest}}\n\n        <div id=\"async-state\">\n          {{! Async state for subsequent requests, only}}\n          {{#if this.request.isPending}}\n             ... loading ...\n          {{else if this.request.isRejected}}\n             error!\n          {{/if}}\n        </div>\n\n        <PersonInfo @person={{this.latest}} />\n      {{else}}\n        {{! This block only matters during the initial request }}\n\n        {{#if this.rejest.isRejected}}\n          error loading initial data!\n        {{else}}\n          <pre> ... loading ... </pre>\n        {{/if}}\n\n      {{/if}}\n    </div>\n    <style>\n      #demo { \n        position: relative; max-width: 30rem; \n        border: 1px solid;\n        padding: 1rem;\n      }\n      #demo input { max-width: 6rem; border: 1px solid; padding: 0.5rem 0.75rem; }\n      #async-state { display: inline-block; margin-left: 1rem; }\n    </style>\n  </template>\n}\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"A reactive value is an object representing a value with some utility methods for updating that value.\n\n```gjs\nimport { cell } from 'ember-resources';\n\nconst greeting = cell();\n\n<template>\n  {{greeting.current}}\n</template>\n```\n\nIn this particular example, we use the [`cell`][gh-cell] primitive from [ember-resources][gh-resources].  \n`cell` provides a single property, `current`, that represents the current value.\n\nFor this exercise, **change the value after 3 seconds have passed after render**.\n\n`cell` has several update methods that could be used for this task:\n\n- `set` - immediately sets the value of `current`\n- `update` - invokes a passed function that receives the previous value and then sets `current` to the return value of that function\n- `toggle` - toggles the value between true and false\n- and directly setting current via `greeting.current = newValue`\n\nHint: you may want [setTimeout][mdn-setTimeout].\n\n[gh-cell]: https://github.com/NullVoxPopuli/ember-resources/blob/98ee38186a39097465ca97a90a68b9af158e75b2/ember-resources/src/util/cell.ts#L78\n[gh-resources]: https://github.com/NullVoxPopuli/ember-resources\n[mdn-setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { cell } from 'ember-resources';\n\nconst greeting = cell('Hello World');\n\n<template>\n  {{greeting.current}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { cell } from 'ember-resources';\n\nconst greeting = cell(\"Hello there!\");\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  greeting.current = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{greeting.current}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { cell } from 'ember-resources';\n\nconst greeting = cell(\"Hello there!\");\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  greeting.current = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{greeting.current}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"As one might imagine, having to access and manipulating a property can get cumbersome.\n\nIf using classes, you could see a pattern develop to try to achieve \"native-like\" read and write access to properties:\n\n```js\nimport { cell } from 'ember-resources';\n\nclass Demo {\n  _value = cell();\n\n  get theProperty() {\n    return this._value.current;\n  }\n\n  set theProperty(nextValue) {\n    return (this._value.current = nextValue);\n  }\n}\n```\n\nThis would allow setting / getting of `theProperty`, which is reactive, without the need to know about the underlying reactive implementation. _Except, you'd still have to maintain all of the above code_.\n\n```gjs\nconst demo = new Demo();\n\nsetTimeout(() => {\n  demo.theProperty = 2;\n}, 500);\n\n<template>\n  {{demo.theProperty}}\n</template>\n```\n\nAll of this is abstracted away with a _property decorator_, called `@tracked`, and the above example can be simplified like so:\n\n```js\nimport { tracked } from '@glimmer/tracking';\n\nclass Demo {\n  @tracked theProperty;\n}\n```\n\nThis decorator automatically wraps up the getter and setter so that the _reference_ to `theProperty` is reactive, and can be set / updated like normal javascript properties.\n\n**For this exercise, re-write the previous example using `@tracked`**\n\nYou'll notice that _for now_ you still have to manage a special object. We'll circle back to that later when we talk about _components_.\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { tracked } from '@glimmer/tracking';\n\nclass Demo {\n}\n\nconst demo = new Demo();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  demo.greeting = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{demo.greeting}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { tracked } from '@glimmer/tracking';\n\nclass Demo {\n  @tracked greeting = 'Hello there!';\n}\n\nconst demo = new Demo();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  demo.greeting = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{demo.greeting}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { tracked } from '@glimmer/tracking';\n\nclass Demo {\n  @tracked greeting = 'Hello there!';\n}\n\nconst demo = new Demo();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  demo.greeting = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{demo.greeting}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Deriving values are automatically reactive and allow for CPU-efficient transformation of other values.\n\nFor example, \"X\" is defined as \"some transformation\" on \"Y\", is a derived value.\n\nIn Glimmer and Ember, it is convention to use a [getter][mdn-get].\nUsing our previous example:\n\n```js\nimport { tracked } from '@glimmer/tracking';\n\nclass Demo {\n  @tracked greeting = 'Hello there!';\n\n  get loudGreeting() {\n    return this.greeting.toUpperCase();\n  }\n}\n```\n\nThe getter, `loudGreeting` will always be up to date.\n\nSomething to watch out for is property assignments in classes,\n\n```js\nclass Demo {\n  @tracked greeting = 'Hello there!';\n\n  loudGreeting = this.greeting.toUpperCase();\n}\n```\n\nThis is explicitly _non-reactive_, because property assignments in classes only happen once.\nFor more information on class fields, [MDN has good content on the subject][mdn-class-fields].\n\n[mdn-get]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\n[mdn-class-fields]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { tracked } from '@glimmer/tracking';\n\nclass Demo {\n  @tracked greeting = 'Hello there!';\n}\n\nconst demo = new Demo();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  demo.greeting = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{demo.greeting}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { tracked } from '@glimmer/tracking';\n\nclass Demo {\n  @tracked greeting = 'Hello there!';\n\n  get loudGreeting() {\n    return this.greeting.toUpperCase();\n  }\n}\n\nconst demo = new Demo();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  demo.greeting = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{demo.loudGreeting}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { tracked } from '@glimmer/tracking';\n\nclass Demo {\n  @tracked greeting = 'Hello there!';\n\n  get loudGreeting() {\n    return this.greeting.toUpperCase();\n  }\n}\n\nconst demo = new Demo();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  demo.greeting = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{demo.loudGreeting}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Plain functions are inherently reactive.\nBuilding off the previous example, call a function that transforms the greeting.\n\n```hbs\n Greeting: {{(shout greeting.current)}}\n```\n\nAny time `greeting.current` changes, `shout` will be re-evaluated for you.\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { cell } from 'ember-resources';\n\nconst greeting = cell(\"Hello there!\");\nconst shout = (text) => text.toUpperCase();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  greeting.current = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{greeting.current}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { cell } from 'ember-resources';\n\nconst greeting = cell(\"Hello there!\");\nconst shout = (text) => text.toUpperCase();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  greeting.current = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{ (shout greeting.current) }}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { cell } from 'ember-resources';\n\nconst greeting = cell(\"Hello there!\");\nconst shout = (text) => text.toUpperCase();\n\n// Change the value after 3 seconds\nsetTimeout(() => {\n  greeting.current = \"General Kenobi!\";\n}, 3000);\n\n<template>\n  Greeting: {{ (shout greeting.current) }}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"A resource represents a value which may be derived from state and has cleanup.\n\nFor example, a resource can show the current time every second:\n\n```gjs\nimport { resource, cell } from 'ember-resources';\n\nconst Clock = resource(({ on }) => {\n  let time = cell(new Date());\n  let interval = setInterval(() => time.current = new Date(), 1000);\n\n  on.cleanup(() => clearInterval(interval));\n\n  return time;\n});\n```\n\nTry rendering the `Clock` like you would any ordinary value:\n\n```gjs\n<template>\n  It is: <time>{{Clock}}</time>\n</template>\n```\n\nThis `Clock` uses [`setInterval`][mdn-setInterval], which requires that the interval is cancelled when `{{Clock}}` is no longer rendered:\n\n```js\non.cleanup(() => clearInterval(interval));\n```\n\nThis `on.cleanup` function will be called when `{{Clock}}` is removed from the DOM.\n\n[mdn-setInterval]: https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { resource, cell } from 'ember-resources';\n\nconst Clock = resource(({ on }) => {\n  let time = cell(new Date());\n  let interval = setInterval(() => time.current = new Date(), 1000);\n\n  on.cleanup(() => clearInterval(interval));\n\n  return time;\n});\n\n<template>\n\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { resource, cell } from 'ember-resources';\n\nconst Clock = resource(({ on }) => {\n  let time = cell(new Date());\n  let interval = setInterval(() => time.current = new Date(), 1000);\n\n  on.cleanup(() => clearInterval(interval));\n\n  return time;\n});\n\n<template>\n  It is: <time>{{Clock}}</time>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { resource, cell } from 'ember-resources';\n\nconst Clock = resource(({ on }) => {\n  let time = cell(new Date());\n  let interval = setInterval(() => time.current = new Date(), 1000);\n\n  on.cleanup(() => clearInterval(interval));\n\n  return time;\n});\n\n<template>\n  It is: <time>{{Clock}}</time>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Combining the concepts of reactive functions and resources allow us to build configurable reactive values with cleanup!\n\nTaking the `Clock` example, we can use a resource builder to allow us to configure how we want the time displayed.\n\n```gjs\nimport { resource, cell, resourceFactory } from 'ember-resources';\n\nconst Clock = resourceFactory((locale = 'en-US') => {\n  let formatter = new Intl.DateTimeFormat(locale, {\n    // ...\n  });\n\n  return resource(({ on }) => {\n    let time = cell(new Date());\n    let interval = setInterval(() => time.current = new Date(), 1000);\n\n    on.cleanup(() => clearInterval(interval));\n\n    return () => formatter.format(time.current);\n  });\n});\n\n<template>\n  It is: <time>{{Clock}}</time><br />\n</template>\n```\n\nTry invoking `{{Clock}}` with different arguments:\n\n```hbs\n\nIt is:\n<time>{{Clock 'ko-KO'}}</time><br />\nIt is:\n<time>{{Clock 'ja-JP-u-ca-japanese'}}</time><br />\n```\n\n[mdn-DateTimeFormat]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { resource, cell, resourceFactory } from 'ember-resources';\n\nconst Clock = resourceFactory((locale = 'en-US') => {\n  let formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true,\n  });\n\n  return resource(({ on }) => {\n    let time = cell(new Date());\n    let interval = setInterval(() => time.current = new Date(), 1000);\n\n    on.cleanup(() => clearInterval(interval));\n\n    return () => formatter.format(time.current);\n  });\n});\n\n<template>\n  It is: <time>{{Clock}}</time><br />\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { resource, cell, resourceFactory } from 'ember-resources';\n\nconst Clock = resourceFactory((locale = 'en-US') => {\n  let formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true,\n  });\n\n  return resource(({ on }) => {\n    let time = cell(new Date());\n    let interval = setInterval(() => time.current = new Date(), 1000);\n\n    on.cleanup(() => clearInterval(interval));\n\n    return () => formatter.format(time.current);\n  });\n});\n\n<template>\n  It is: <time>{{Clock}}</time><br />\n  It is: <time>{{Clock 'en-GB'}}</time><br />\n  It is: <time>{{Clock 'ko-KO'}}</time><br />\n  It is: <time>{{Clock 'ja-JP-u-ca-japanese'}}</time>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { resource, cell, resourceFactory } from 'ember-resources';\n\nconst Clock = resourceFactory((locale = 'en-US') => {\n  let formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true,\n  });\n\n  return resource(({ on }) => {\n    let time = cell(new Date());\n    let interval = setInterval(() => time.current = new Date(), 1000);\n\n    on.cleanup(() => clearInterval(interval));\n\n    return () => formatter.format(time.current);\n  });\n});\n\n<template>\n  It is: <time>{{Clock}}</time><br />\n  It is: <time>{{Clock 'en-GB'}}</time><br />\n  It is: <time>{{Clock 'ko-KO'}}</time><br />\n  It is: <time>{{Clock 'ja-JP-u-ca-japanese'}}</time>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Where resources' real power comes in is the composibility of other resources.\n\nIn previous chapters, we've built a clock, which updates every second.\nBut now let's say we also want to make a Stopwatch, but we only want to manage `setInterval` once, we may want to make a Resource with configurable interval milliseconds, like this:\n\n```js\nconst Time = resourceFactory((ms) => resource(({ on }) => {\n  let time = cell(Date.now());\n  let interval = setInterval(() => time.current = Date.now(), ms);\n\n  on.cleanup(() => clearInterval(interval));\n\n  return time;\n}));\n```\n\nThis uses the [`Date.now()`][mdn-date] method which gives us millisecond precision and represents the time in milliseconds since January 1, 1970 00:00:00 UTC (the [epoch][ecma-epoch]).\n\n\nThe `on` object is not the only property we have at our disposal.  We are provided a `use` function that allows us to _use_ other resources.\n\n```js \nconst FormattedClock = resourceFactory((locale = 'en-US') => {\n  let formatter = new Intl.DateTimeFormat(locale, { /* ... */ });\n\n  return resource(({ on, use }) => {\n    const time = use(Time(1_000));\n\n    return () => formatter.format(time.current);\n  });\n});\n```\n\nThis allows us to use the same resource to both make a `Clock` as well as a `Stopwatch`\n```js\nconst Clock = resource(({ on, use }) => {\n  let time = use(Time(1_000));\n  return time;\n});\n\nconst Stopwatch = resource(({ on, use }) => {\n  let time = use(Time(0));\n  return time;\n});\n```\n\nYou could even combine these into a single resource -- `use` can be used as many times as you wish.\n\n```js\nconst Watch = resource(({ on, use }) => {\n  let clock = use(Time(1_000));\n  let stopwatch = use(Time(0));\n\n  return {\n    get currentTime() {\n      return clock.current;\n    },\n    get currentMs() {\n      return stopwatch.current;\n    }\n  };\n});\n```\n\n\n[mdn-date]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n[ecma-epoch]: https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-time-values-and-time-range\n\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { resource, cell, resourceFactory } from 'ember-resources';\n\nconst Time = resourceFactory((ms) => resource(({ on }) => {\n  let time = cell(Date.now());\n  let interval = setInterval(() => time.current = Date.now(), ms);\n\n  on.cleanup(() => clearInterval(interval));\n\n  return time;\n}));\n\nconst Clock = resource(({ use }) => {\n  /* Add your composition here */\n});\n\nconst Stopwatch = resource(({ use }) => {\n  /* Add your composition here */\n});\n\n<template>\n  Clock: <time>{{Clock}}</time><br />\n  Stopwatch: {{Stopwatch}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { resource, cell, resourceFactory } from 'ember-resources';\n\nconst Time = resourceFactory((ms) => resource(({ on }) => {\n  let time = cell(Date.now());\n  let interval = setInterval(() => time.current = Date.now(), ms);\n\n  on.cleanup(() => clearInterval(interval));\n\n  return time;\n}));\n\nconst Clock = resource(({ use }) => {\n  return use(Time(1_000));\n});\n\nconst Stopwatch = resource(({ use }) => {\n  return use(Time(0));\n});\n\n// from a previous example\nconst FormattedClock = resourceFactory((locale = 'en-US') => {\n  let formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true,\n  });\n\n  return resource(({ use }) => {\n    let time = use(Clock);\n\n    return () => formatter.format(time.current);\n  });\n});\n\n// demonstrating that use can be used multiple times\nconst Watch = resource(({ use }) => {\n  let clock = use(Time(1_000));\n  let stopwatch = use(Time(0));\n\n  // alternative way to have reactive properties\n  return {\n    get currentTime() {\n      return clock.current;\n    },\n    get currentMs() {\n      return stopwatch.current;\n    }\n  };\n});\n\n<template>\n  Go! {{Stopwatch}} (ms since the epoch) <br />\n  It is: <time>{{Clock}}</time><br />\n  It is: <time>{{FormattedClock}}</time><br />\n  It is: <time>{{FormattedClock 'en-GB'}}</time><br />\n  It is: <time>{{FormattedClock 'ko-KO'}}</time><br />\n  It is: <time>{{FormattedClock 'ja-JP-u-ca-japanese'}}</time><br>\n  <br>\n\n  {{#let (Watch) as |watch|}}\n    watch.currentTime: {{watch.currentTime}}<br>\n    watch.currentMs: {{watch.currentMs}}\n  {{/let}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { resource, cell, resourceFactory } from 'ember-resources';\n\nconst Time = resourceFactory((ms) => resource(({ on }) => {\n  let time = cell(Date.now());\n  let interval = setInterval(() => time.current = Date.now(), ms);\n\n  on.cleanup(() => clearInterval(interval));\n\n  return time;\n}));\n\nconst Clock = resource(({ use }) => {\n  return use(Time(1_000));\n});\n\nconst Stopwatch = resource(({ use }) => {\n  return use(Time(0));\n});\n\n// from a previous example\nconst FormattedClock = resourceFactory((locale = 'en-US') => {\n  let formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true,\n  });\n\n  return resource(({ use }) => {\n    let time = use(Clock);\n\n    return () => formatter.format(time.current);\n  });\n});\n\n// demonstrating that use can be used multiple times\nconst Watch = resource(({ use }) => {\n  let clock = use(Time(1_000));\n  let stopwatch = use(Time(0));\n\n  // alternative way to have reactive properties\n  return {\n    get currentTime() {\n      return clock.current;\n    },\n    get currentMs() {\n      return stopwatch.current;\n    }\n  };\n});\n\n<template>\n  Go! {{Stopwatch}} (ms since the epoch) <br />\n  It is: <time>{{Clock}}</time><br />\n  It is: <time>{{FormattedClock}}</time><br />\n  It is: <time>{{FormattedClock 'en-GB'}}</time><br />\n  It is: <time>{{FormattedClock 'ko-KO'}}</time><br />\n  It is: <time>{{FormattedClock 'ja-JP-u-ca-japanese'}}</time><br>\n  <br>\n\n  {{#let (Watch) as |watch|}}\n    watch.currentTime: {{watch.currentTime}}<br>\n    watch.currentMs: {{watch.currentMs}}\n  {{/let}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"A modifier, or _element modifier_, is a utility for performing some action on an _element_.\n\nLike resources, modifiers also have cleanup -- and modifiers could be thought of as resource builders that take an element as one of their arguments.\n\nFor example, we could apply an animation to an element:\n\n```gjs\nimport { modifier } from 'ember-modifier';\n\nconst intensify = modifier((element) => {\n  let animation = element.animate([\n    { transform: \"translateX(2px)\" },\n    { transform: \"translateY(2px)\" },\n    { transform: \"translateX(-2px)\" },\n  ], {\n    duration: 100,\n    iterations: Infinity,\n  });\n\n  return () => animation.cancel();\n});\n```\n\nTry applying the modifier:\n\n```hbs\n<div {{intensify}}>\n  content\n</div>\n```\n\nIt's important to cleanup a modifier so that state, whether in-app, or in native built-in browser state, doesn't leak.\nIn this example, the animation in cancelled when the element is no longer rendered.\n\nFull docs for modifiers can be found on the [`ember-modifier`][gh-e-modifier] GitHub.\n\n[gh-e-modifier]: https://github.com/ember-modifier/ember-modifier\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { modifier } from 'ember-modifier';\n\nconst intensify = modifier((element) => {\n  let animation = element.animate([\n    { transform: \"translateX(2px)\" },\n    { transform: \"translateY(2px)\" },\n    { transform: \"translateX(-2px)\" },\n  ], {\n    duration: 100,\n    iterations: Infinity,\n  });\n\n  return () => animation.cancel();\n});\n\n<template>\n  <div>\n    content\n  </div>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { modifier } from 'ember-modifier';\n\nconst intensify = modifier((element) => {\n  let animation = element.animate([\n    { transform: \"translateX(2px)\" },\n    { transform: \"translateY(2px)\" },\n    { transform: \"translateX(-2px)\" },\n  ], {\n    duration: 100,\n    iterations: Infinity,\n  });\n\n  return () => animation.cancel();\n});\n\n<template>\n  <div {{intensify}}>\n    content\n  </div>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { modifier } from 'ember-modifier';\n\nconst intensify = modifier((element) => {\n  let animation = element.animate([\n    { transform: \"translateX(2px)\" },\n    { transform: \"translateY(2px)\" },\n    { transform: \"translateX(-2px)\" },\n  ], {\n    duration: 100,\n    iterations: Infinity,\n  });\n\n  return () => animation.cancel();\n});\n\n<template>\n  <div {{intensify}}>\n    content\n  </div>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Components are the collection of the primitives that build higher level UI.\n\nDefining a component is done with `<template>` tags.\n\nIn every `gjs` or `gts` file,\n\n```gjs\n<template>\n  content here\n</template>\n```\n\nis a syntactical sugar for `export default`, which is also allowed to be written, but is slightly more verbose:\n\n```gjs\nexport default <template>\n  content here\n</template>;\n```\n\nMultiple components can be defined in one file and assigned to a variable:\n\n```gjs\nconst NameInput = <template>\n  ...\n</template>;\n```\n\nComponents are invoked with `<` and `>` and arguments are passed via `@`-prefixed names.\n\n```hbs\n<Greeting @name='Yoda' />\n```\n\n_Invoke the ready-made component(s) and pass an argument._\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nconst myName = cell('there');\nconst handleInput = (event) => myName.current = event.target.value;\n\nconst NameInput = <template>\n  <label>\n    Name\n    <input\n      class=\"border border-gray-900\"\n      value=\"there\"\n      {{on \"input\" handleInput}}\n    />\n  </label>\n</template>;\n\n\nconst Greeting = <template>\n  Hello, {{@name}}!\n</template>;\n\n<template>\n\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nconst myName = cell('there');\nconst handleInput = (event) => myName.current = event.target.value;\n\nconst NameInput = <template>\n  <label>\n    Name\n    <input\n      class=\"border border-gray-900\"\n      value=\"there\"\n      {{on \"input\" handleInput}}\n    />\n  </label>\n</template>;\n\n\nconst Greeting = <template>\n  Hello, {{@name}}!\n</template>;\n\n<template>\n  <NameInput /><br>\n\n  <Greeting @name={{myName.current}} />\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nconst myName = cell('there');\nconst handleInput = (event) => myName.current = event.target.value;\n\nconst NameInput = <template>\n  <label>\n    Name\n    <input\n      class=\"border border-gray-900\"\n      value=\"there\"\n      {{on \"input\" handleInput}}\n    />\n  </label>\n</template>;\n\n\nconst Greeting = <template>\n  Hello, {{@name}}!\n</template>;\n\n<template>\n  <NameInput /><br>\n\n  <Greeting @name={{myName.current}} />\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Components can have their own encapsulated state by using a [class][mdn-class].\nThis allows defining and access to reactive state as well as the broader application's global state system (usually dependency injected \"services\"), if available.\n\nWe can refactor the previous example's module-level state to be contained within a class:\n\n```gjs\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class Demo extends Component {\n  @tracked myName;\n\n  handleInput = (event) => this.myName = event.target.value;\n\n  <template>\n    <NameInput @onInput={{this.handleInput}} />\n\n    <Greeting @name={{this.myName}} />\n  </template>\n}\n```\n\n[mdn-class]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nconst myName = cell('there');\nconst handleInput = (event) => myName.current = event.target.value;\n\nconst NameInput = <template>\n  <label>\n    Name\n    <input\n      class=\"border border-gray-900\"\n      value=\"there\"\n      {{on \"input\" handleInput}}\n    />\n  </label>\n</template>;\n\n\nconst Greeting = <template>\n  Hello, {{@name}}!\n</template>;\n\n<template>\n  <NameInput /><br>\n\n  <Greeting @name={{myName.current}} />\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\n\nexport default class Demo extends Component {\n  @tracked myName = 'there';\n\n  handleInput = (event) => this.myName = event.target.value;\n\n  <template>\n    <NameInput @onInput={{this.handleInput}} /><br>\n\n    <Greeting @name={{this.myName}} />\n  </template>\n}\n\nconst NameInput = <template>\n  <label>\n    Name\n    <input\n      class=\"border border-gray-900\"\n      value=\"there\"\n      {{on \"input\" @onInput}}\n    />\n  </label>\n</template>;\n\n\nconst Greeting = <template>\n  Hello, {{@name}}!\n</template>;\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\n\nexport default class Demo extends Component {\n  @tracked myName = 'there';\n\n  handleInput = (event) => this.myName = event.target.value;\n\n  <template>\n    <NameInput @onInput={{this.handleInput}} /><br>\n\n    <Greeting @name={{this.myName}} />\n  </template>\n}\n\nconst NameInput = <template>\n  <label>\n    Name\n    <input\n      class=\"border border-gray-900\"\n      value=\"there\"\n      {{on \"input\" @onInput}}\n    />\n  </label>\n</template>;\n\n\nconst Greeting = <template>\n  Hello, {{@name}}!\n</template>;\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"As seen previously, `on` was used to listen for `click` events on a button.\n\nThe `on` modifier can be thought of as an alias for [`addEventListener`][mdn-addEventListener], so anything it can do, `on` can do.\n\nFor example, try observing the x / y coordinates of the mouse on this div:\n\n```hbs\n<div {{on 'mousemove' handleMouseMove}}>\n  The mouse position is\n  {{m.x}}\n  x\n  {{m.y}}\n</div>\n```\n\nWhen moving the cursor over the div, the rendered coordinates should update.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/4.11/classes/Ember.Templates.helpers/methods/on?anchor=on\n[mdn-addEventListener]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass Coordinates {\n  @tracked x = '?';\n  @tracked y = '?';\n}\n\nlet m = new Coordinates();\n\nfunction handleMouseMove(mouseEvent) {\n  m.x = mouseEvent.clientX;\n  m.y = mouseEvent.clientY;\n}\n\n<template>\n  <div>\n    The mouse position is {{m.x}} x {{m.y}}\n  </div>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass Coordinates {\n  @tracked x = '?';\n  @tracked y = '?';\n}\n\nlet m = new Coordinates();\n\nfunction handleMouseMove(mouseEvent) {\n  m.x = mouseEvent.clientX;\n  m.y = mouseEvent.clientY;\n}\n\n<template>\n  <div {{on 'mousemove' handleMouseMove}}>\n    The mouse position is {{m.x}} x {{m.y}}\n  </div>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass Coordinates {\n  @tracked x = '?';\n  @tracked y = '?';\n}\n\nlet m = new Coordinates();\n\nfunction handleMouseMove(mouseEvent) {\n  m.x = mouseEvent.clientX;\n  m.y = mouseEvent.clientY;\n}\n\n<template>\n  <div {{on 'mousemove' handleMouseMove}}>\n    The mouse position is {{m.x}} x {{m.y}}\n  </div>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"DOM event handlers can have [modifiers][mdn-addEventListener] that alter their behavior.\nFor example, a handler with a `once` modifier will only run a single time:\n\n```hbs\n<button {{on 'click' handleClick once=true}}>\n  Click me\n</button>\n```\n\nThe full list of modifiers is covered on both [MDN][mdn-addEventListener] and the [Ember API Docs][docs].\n\n- `capture` -- a true value indicates that events of this type will be dispatched to the registered listener before being dispatched to any `EventTarget` beneath it in the DOM tree.\n- `once` -- indicates that the listener should be invoked at most once after being added. If true, the listener would be automatically removed when invoked.\n- `passive` -- if true, indicates that the function specified by listener will never call `preventDefault()`. If a passive listener does call `preventDefault()`, the user agent will do nothing other than generate a console warning. See [Improving scrolling performance with passive listeners][scroll-perf] to learn more.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/4.11/classes/Ember.Templates.helpers/methods/on?anchor=on\n[mdn-addEventListener]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#parameters\n[scroll-perf]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet clicks = cell(0);\n\nfunction handleClick(mouseEvent) {\n  clicks.current++;\n}\n\n<template>\n  <button {{on 'click' handleClick}}>\n    Click me!\n  </button>\n\n  Clicked: {{clicks.current}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet clicks = cell(0);\n\nfunction handleClick(mouseEvent) {\n  clicks.current++;\n}\n\n<template>\n  <button {{on 'click' handleClick once=true}}>\n    Click me!\n  </button>\n\n  Clicked: {{clicks.current}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet clicks = cell(0);\n\nfunction handleClick(mouseEvent) {\n  clicks.current++;\n}\n\n<template>\n  <button {{on 'click' handleClick once=true}}>\n    Click me!\n  </button>\n\n  Clicked: {{clicks.current}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Event forwarding happens when a component exposes its _element-api_ via `...attributes`\n\n```hbs\n<button ...attributes>\n  Click me\n</button>\n```\n\nThen the consumer of this component can add any event listener they wish:\n\n```hbs\n<SomeComponent {{on 'click' handleClick}} />\n```\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\n\nlet SomeComponent = <template>\n  <button>\n    Click me\n  </button>\n</template>;\n\nfunction handleClick() {\n  count.current++;\n}\n\n<template>\n  <SomeComponent />\n\n  Clicked {{count.current}} times\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\n\nlet SomeComponent = <template>\n  <button ...attributes>\n    Click me\n  </button>\n</template>;\n\nfunction handleClick() {\n  count.current++;\n}\n\n<template>\n  <SomeComponent {{on 'click' handleClick}} />\n\n  Clicked {{count.current}} times\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\n\nlet SomeComponent = <template>\n  <button ...attributes>\n    Click me\n  </button>\n</template>;\n\nfunction handleClick() {\n  count.current++;\n}\n\n<template>\n  <SomeComponent {{on 'click' handleClick}} />\n\n  Clicked {{count.current}} times\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Components don't do anything special with event handling -- it all uses the built-in features of the browser.\n\nWe can use [`dispatchEvent`][mdn-dispatchEvent] with the `on` modifier to both dispatch and handle a custom event.\n\n```js\nlet customEvent = new Event('my-custom-event');\n\nsomeElement.dispatchEvent(customEvent);\n```\n\nThe event listener for `my-custom-event` has to exist somewhere as well.\nWe can forward the _Element_ api upward with `...attributes`\n\n```hbs\n<button ...attributes {{on 'click' handleInnerClick}}>\n  Click me\n</button>\n```\n\nWhen creating custom Events, you can control if the event bubbles or is cancelable, [see on MDN][mdn-Event].\n\n[mdn-dispatchEvent]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent\n[mdn-Event]: https://developer.mozilla.org/en-US/docs/Web/API/Event/Event\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\n\nfunction handleInnerClick(clickEvent) {\n}\n\nlet Inner = <template>\n  <button {{on 'click' handleInnerClick}}>\n    Click me\n  </button>\n</template>;\n\nfunction handleCustom(event) {\n  count.current++;\n}\n\n<template>\n  <Inner {{on 'my-custom-event' handleCustom}} />\n\n  Clicked {{count.current}} times\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\n\nfunction handleInnerClick(clickEvent) {\n  let customEvent = new Event('my-custom-event');\n  clickEvent.target.dispatchEvent(customEvent);\n}\n\nlet Inner = <template>\n  <button ...attributes {{on 'click' handleInnerClick}}>\n    Click me\n  </button>\n</template>;\n\nfunction handleCustom(event) {\n  count.current++;\n}\n\n<template>\n  <Inner {{on 'my-custom-event' handleCustom}} />\n\n  Clicked {{count.current}} times\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\n\nfunction handleInnerClick(clickEvent) {\n  let customEvent = new Event('my-custom-event');\n  clickEvent.target.dispatchEvent(customEvent);\n}\n\nlet Inner = <template>\n  <button ...attributes {{on 'click' handleInnerClick}}>\n    Click me\n  </button>\n</template>;\n\nfunction handleCustom(event) {\n  count.current++;\n}\n\n<template>\n  <Inner {{on 'my-custom-event' handleCustom}} />\n\n  Clicked {{count.current}} times\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"HTML lacks the ability to express logic, like conditionals, loops, etc.\n\nTo render markup conditionally, it involves wrapping it in an if block:\n\n```hbs\n{{#if loggedIn}}\n  <button {{on 'click' toggle}}>\n    Log out\n  </button>\n\n{{/if}}\n\n{{#if (notLoggedIn)}}\n  <button>\n    Log in\n  </button>\n{{/if}}\n```\n\nTry updating the example so that the buttons are conditionally shown based on the `loggedIn` boolean.\n\n---\n\nNote that the syntax for \"control flow\" is a _pair_ of `{{ ... }}` with the opening `{{ }}` starting with a `#` and the closing `{{ }}` starting with a `/`. This is called \"block syntax\".\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/if?anchor=if\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass User {\n  @tracked loggedIn = false;\n}\n\nconst user = new User();\nconst notLoggedIn = () => !user.loggedIn;\nconst toggle = () => user.loggedIn = !user.loggedIn;\n\n<template>\n  <button {{on 'click' toggle}}>\n    Log out\n  </button>\n\n  <button {{on 'click' toggle}}>\n    Log in\n  </button>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass User {\n  @tracked loggedIn = false;\n}\n\nconst user = new User();\nconst notLoggedIn = () => !user.loggedIn;\nconst toggle = () => user.loggedIn = !user.loggedIn;\n\n<template>\n  Logged in: {{user.loggedIn}}<br>\n\n  {{#if user.loggedIn}}\n    <button {{on 'click' toggle}}>\n      Log out\n    </button>\n  {{/if}}\n\n  {{#if (notLoggedIn)}}\n    <button {{on 'click' toggle}}>\n      Log in\n    </button>\n  {{/if}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass User {\n  @tracked loggedIn = false;\n}\n\nconst user = new User();\nconst notLoggedIn = () => !user.loggedIn;\nconst toggle = () => user.loggedIn = !user.loggedIn;\n\n<template>\n  Logged in: {{user.loggedIn}}<br>\n\n  {{#if user.loggedIn}}\n    <button {{on 'click' toggle}}>\n      Log out\n    </button>\n  {{/if}}\n\n  {{#if (notLoggedIn)}}\n    <button {{on 'click' toggle}}>\n      Log in\n    </button>\n  {{/if}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"`unless` blocks behave the same as `if` blocks, except the condition is inverted.\n\nFor example:\n\n```hbs\n{{#unless condition}}\n  shows when condition is false\n{{else}}\n  shows when condition is true\n{{/unless}}\n```\n\nTry changing the `if` statement to an `unless` statement.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/unless?anchor=unless\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let condition = true;\n\n<template>\n  {{#if condition}}\n    the condition is true\n  {{else}}\n    the condition is false\n  {{/if}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let condition = true;\n\n<template>\n  {{#unless condition}}\n    the condition is false\n  {{else}}\n    the condition is true\n  {{/unless}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let condition = true;\n\n<template>\n  {{#unless condition}}\n    the condition is false\n  {{else}}\n    the condition is true\n  {{/unless}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Since the two conditions â€” `if user.loggedIn` and `if (notLoggedIn)` â€” are mutually exclusive, we can simplify this component slightly by using an else block:\n\n```hbs\n{{#if user.loggedIn}}\n  <button {{on 'click' toggle}}>\n    Log out\n  </button>\n{{else}}\n  <button {{on 'click' toggle}}>\n    Log in\n  </button>\n{{/if}}\n```\n\nNote that `{{else}}` is an inconsistency in the syntax. Normally `{{identifier}}` would render a value to the DOM, but in this case, `{{else}}` is a special key word that is only valid within `if` and `unless` blocks.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/if?anchor=if\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass User {\n  @tracked loggedIn = false;\n}\n\nconst user = new User();\nconst notLoggedIn = () => !user.loggedIn;\nconst toggle = () => user.loggedIn = !user.loggedIn;\n\n<template>\n  Logged in: {{user.loggedIn}}<br>\n\n  {{#if user.loggedIn}}\n    <button {{on 'click' toggle}}>\n      Log out\n    </button>\n  {{/if}}\n\n  {{#if (notLoggedIn)}}\n    <button {{on 'click' toggle}}>\n      Log in\n    </button>\n  {{/if}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass User {\n  @tracked loggedIn = false;\n}\n\nconst user = new User();\nconst notLoggedIn = () => !user.loggedIn;\nconst toggle = () => user.loggedIn = !user.loggedIn;\n\n<template>\n  Logged in: {{user.loggedIn}}<br>\n\n  {{#if user.loggedIn}}\n    <button {{on 'click' toggle}}>\n      Log out\n    </button>\n  {{else}}\n    <button {{on 'click' toggle}}>\n      Log in\n    </button>\n  {{/if}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\n\nclass User {\n  @tracked loggedIn = false;\n}\n\nconst user = new User();\nconst notLoggedIn = () => !user.loggedIn;\nconst toggle = () => user.loggedIn = !user.loggedIn;\n\n<template>\n  Logged in: {{user.loggedIn}}<br>\n\n  {{#if user.loggedIn}}\n    <button {{on 'click' toggle}}>\n      Log out\n    </button>\n  {{else}}\n    <button {{on 'click' toggle}}>\n      Log in\n    </button>\n  {{/if}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Multiple conditions can be chained together without indentation or nesting.\n\n```hbs\n{{#if (moreThan10 x)}}\n  <p>{{x}} is greater than 10</p>\n{{else if (lessThan5)}}\n  <p>{{x}} is less than 5</p>\n{{else}}\n  <p>{{x}} is between 5 and 10</p>\n{{/if}}\n```\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/if?anchor=if\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let x = 7;\n\nconst moreThan10 = () => x > 10;\nconst lessThan5 = () => x < 5;\n\n<template>\n  {{#if (moreThan10 x)}}\n    <p>{{x}} is greater than 10</p>\n  {{else}}\n    {{#if (lessThan5)}}\n      <p>{{x}} is less than 5</p>\n    {{else}}\n      <p>{{x}} is between 5 and 10</p>\n    {{/if}}\n  {{/if}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let x = 7;\n\nconst moreThan10 = () => x > 10;\nconst lessThan5 = () => x < 5;\n\n<template>\n  {{#if (moreThan10 x)}}\n    <p>{{x}} is greater than 10</p>\n  {{else if (lessThan5)}}\n    <p>{{x}} is less than 5</p>\n  {{else}}\n    <p>{{x}} is between 5 and 10</p>\n  {{/if}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let x = 7;\n\nconst moreThan10 = () => x > 10;\nconst lessThan5 = () => x < 5;\n\n<template>\n  {{#if (moreThan10 x)}}\n    <p>{{x}} is greater than 10</p>\n  {{else if (lessThan5)}}\n    <p>{{x}} is less than 5</p>\n  {{else}}\n    <p>{{x}} is between 5 and 10</p>\n  {{/if}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Inline if can be useful for inline conditions:\n\n- conditional argument values\n- conditional css classes\n\n```hbs\n<Demo @background={{if darkMode \"#222\" \"#eee\"}} />\n\nor\n\n<div style=\"background: {{@background}}\" class=\"{{if (isDarkMode @background) 'text-white' 'text-dark'}}\">\n```\n\nInline if is not a block-helper, so it does not need the `#` and `/` syntax.\n\nIt can be read similarly: `{{if (condition) (value when true) (value when false)}}`\n\nSometimes it can be hard to read the positional arguments of the inline if, so some folks will format like this:\n\n```hbs\n<div\n  style=\"background: {{@background}}\"\n  class=\"{{if (isOnDark @background)\n              'text-white'\n              'text-dark'\n         }}\"\n>\n```\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/if?anchor=if\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { cell } from 'ember-resources';\nimport { on } from '@ember/modifier';\n\nlet dark = '#222';\nlet light = '#eee';\nlet isOnDark = (color) => color === dark;\n\nconst Demo = <template>\n  <style>\n    .demo__inline-if {\n      background: {{@background}};\n      color: {{light}};\n      padding: 2px 5px;\n    }\n  </style>\n\n  <div class=\"demo__inline-if\">\n    content goes here\n  </div>\n</template>;\n\nlet isDark = cell(true);\n\n<template>\n  <Demo @background={{dark}} />\n\n  <br>\n  <button {{on 'click' isDark.toggle}}>Toggle Mode</button><br>\n</template>;\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { cell } from 'ember-resources';\nimport { on } from '@ember/modifier';\n\nlet dark = '#222';\nlet light = '#eee';\nlet isOnDark = (color) => color === dark;\n\nconst Demo = <template>\n  <style>\n    .demo__inline-if {\n      background: {{@background}};\n      color: {{if (isOnDark @background) light dark}};\n      padding: 2px 5px;\n    }\n  </style>\n\n  <div class=\"demo__inline-if\">\n    content goes here\n  </div>\n</template>;\n\nlet isDark = cell(true);\n\n<template>\n  <Demo @background={{if isDark.current dark light}} />\n\n  <br>\n  <button {{on 'click' isDark.toggle}}>Toggle Mode</button><br>\n</template>;\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { cell } from 'ember-resources';\nimport { on } from '@ember/modifier';\n\nlet dark = '#222';\nlet light = '#eee';\nlet isOnDark = (color) => color === dark;\n\nconst Demo = <template>\n  <style>\n    .demo__inline-if {\n      background: {{@background}};\n      color: {{if (isOnDark @background) light dark}};\n      padding: 2px 5px;\n    }\n  </style>\n\n  <div class=\"demo__inline-if\">\n    content goes here\n  </div>\n</template>;\n\nlet isDark = cell(true);\n\n<template>\n  <Demo @background={{if isDark.current dark light}} />\n\n  <br>\n  <button {{on 'click' isDark.toggle}}>Toggle Mode</button><br>\n</template>;\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Looping over lists of data can be done with an `each` block:\n\n```hbs\n<ul>\n  {{#each planets as |planet|}}\n    <li>\n      <a href='https://swapi.dev/api/planets/{{planet.id}}/' target='_blank'>\n        {{planet.name}}\n      </a>\n    </li>\n  {{/each}}\n</ul>\n```\n\nYou can get the current index as a second argument as well:\n\n```hbs\n<ul>\n  {{#each planets as |planet i|}}\n    <li>\n      <a href='https://swapi.dev/api/planets/{{planet.id}}/' target='_blank'>\n        {{i}}\n        {{planet.name}}\n      </a>\n    </li>\n  {{/each}}\n</ul>\n```\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/each?anchor=each\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let planets = [\n  { id: 1, name: 'Tatooine' },\n  { id: 2, name: 'Alderaan' },\n  { id: 3, name: 'Yavin IV' },\n];\n\n<template>\n  <ul>\n    {{! open each block }}\n      <li>\n        <a href=\"https://swapi.dev/api/planets/{{planet.id}}/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {{planet.name}}\n        </a>\n      </li>\n    {{! close each block }}\n  </ul>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let planets = [\n  { id: 1, name: 'Tatooine' },\n  { id: 2, name: 'Alderaan' },\n  { id: 3, name: 'Yavin IV' },\n];\n\n<template>\n  <ul>\n    {{#each planets as |planet|}}\n      <li>\n        <a href=\"https://swapi.dev/api/planets/{{planet.id}}/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {{planet.name}}\n        </a>\n      </li>\n    {{/each}}\n  </ul>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let planets = [\n  { id: 1, name: 'Tatooine' },\n  { id: 2, name: 'Alderaan' },\n  { id: 3, name: 'Yavin IV' },\n];\n\n<template>\n  <ul>\n    {{#each planets as |planet|}}\n      <li>\n        <a href=\"https://swapi.dev/api/planets/{{planet.id}}/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {{planet.name}}\n        </a>\n      </li>\n    {{/each}}\n  </ul>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Like, `each` is for iterating over lists of objects, `each-in` is for iterating over entries within an object.\n\n```hbs\n<table>\n  {{#each-in planet as |property value|}}\n    <tr>\n      <th scope='row'>{{property}}</th>\n      <td>{{value}}</td>\n    </tr>\n  {{/each-in}}\n</table>\n```\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/each-in?anchor=each-in\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let planet = {\n  name: 'Tatooine',\n  rotationPeriod: 23,\n  orbitalPeriod: 304,\n  diameter: 10465,\n  climate: 'arid',\n  gravity: '1 standard',\n  terrain: 'desert',\n};\n\n<template>\n  <table>\n\n  </table>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let planet = {\n  name: 'Tatooine',\n  rotationPeriod: 23,\n  orbitalPeriod: 304,\n  diameter: 10465,\n  climate: 'arid',\n  gravity: '1 standard',\n  terrain: 'desert',\n};\n\n<template>\n  <table>\n    {{#each-in planet as |property value|}}\n      <tr>\n        <th scope=\"row\">{{property}}</th>\n        <td>{{value}}</td>\n      </tr>\n    {{/each-in}}\n  </table>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let planet = {\n  name: 'Tatooine',\n  rotationPeriod: 23,\n  orbitalPeriod: 304,\n  diameter: 10465,\n  climate: 'arid',\n  gravity: '1 standard',\n  terrain: 'desert',\n};\n\n<template>\n  <table>\n    {{#each-in planet as |property value|}}\n      <tr>\n        <th scope=\"row\">{{property}}</th>\n        <td>{{value}}</td>\n      </tr>\n    {{/each-in}}\n  </table>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"By default, when you modify an entry in a list looped over by an `each` block, object-identity equality will be used to optimize the loop. Much like how reactive-values are only reactive via the _reference_ to their value, the content of an `each` loop, per-item, is cached on the reference to the item in the list.\n\nThis behavior can be modified, like if a list of data does not contain stable object references.\n\nWe can choose a property to watch for changes:\n\n```hbs\n<ul>\n  {{#each planets key='id' as |planet|}}\n    <li>{{planet.name}}</li>\n  {{/each}}\n</ul>\n```\n\nWe can observe how the list updates the DOM by seeing how function invocations occur within the `each` loop.\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\nimport { fn } from '@ember/helper';\n\nlet planets = [\n  { id: 1, name: 'Tatooine' },\n  { id: 2, name: 'Alderaan' },\n  { id: 3, name: 'Yavin IV' },\n]);\n\nexport default class Demo extends Component {\n  <template>\n    <ul>\n      {{#each this.planets as |planet|}}\n        {{ (this.iterated planet) }}\n        <li>\n          {{planet.name}}\n          <button {{on 'click' (fn this.remove planet)}}>remove</button>\n        </li>\n      {{/each}}\n    </ul>\n    <button {{on 'click' this.add}}>\n      add data\n    </button>\n  </template>\n\n  @tracked planets = planets;\n\n  iterated = (planet) => console.log(planet.name);\n\n  add = () => {\n    this.planets = [...this.planets, { id: this.planets.length, name: 'Hoth' }];\n  }\n\n  remove = (planet) => {\n    this.planets = this.planets.filter((p) => p.id !== planet.id);\n  }\n\n}\n\"\"\", the user should be able to come up with this final working code: \"\"\"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\nimport { fn } from '@ember/helper';\n\nexport default class Demo extends Component {\n  <template>\n    <ul>\n      {{#each this.planets key=\"name\" as |planet|}}\n        {{ (this.iterated planet) }}\n        <li>\n          <button {{on 'click' (fn this.remove planet)}}>remove</button>\n          {{planet.name}}\n        </li>\n      {{/each}}\n    </ul>\n\n    {{#if (hasMorePlanets this.planets)}}\n      <button {{on 'click' this.add}}>\n        add\n      </button>\n    {{/if}}\n  </template>\n\n  @tracked planets = withNewIds(planets);\n\n  iterated = (planet) => console.log(planet.name);\n\n  add = () => {\n    this.planets = [\n      ...this.planets,\n      {\n        id: this.planets.length + 1,\n        ...getPlanet(this.planets)\n      },\n    ];\n  }\n\n  remove = (planet) => {\n    this.planets = this.planets.filter((p) => p.id !== planet.id);\n  }\n\n}\n\nlet planets = [\n  { name: 'Tatooine' },\n  { name: 'Alderaan' },\n  { name: 'Yavin IV' },\n  { name: 'Hoth' },\n  { name: 'Dagobah' },\n  { name: 'Bespin' },\n  { name: 'Endor' },\n  { name: 'Naboo' },\n];\n\nfunction hasMorePlanets(existing) {\n  return existing.length < planets.length;\n}\n\nfunction getPlanet(existing) {\n  let remaining = planets.filter((planet) => {\n    let alreadyUsed = existing.some(existing => existing.name === planet.name);\n\n    return !alreadyUsed;\n  });\n\n  let randomIndex = Math.floor(Math.random() * remaining.length);\n\n  return remaining[randomIndex];\n}\n\nfunction withNewIds(planets) {\n  return planets.map((planet, i) => ({ id: i + 1, ...planet }));\n}\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { on } from '@ember/modifier';\nimport { fn } from '@ember/helper';\n\nexport default class Demo extends Component {\n  <template>\n    <ul>\n      {{#each this.planets key=\"name\" as |planet|}}\n        {{ (this.iterated planet) }}\n        <li>\n          <button {{on 'click' (fn this.remove planet)}}>remove</button>\n          {{planet.name}}\n        </li>\n      {{/each}}\n    </ul>\n\n    {{#if (hasMorePlanets this.planets)}}\n      <button {{on 'click' this.add}}>\n        add\n      </button>\n    {{/if}}\n  </template>\n\n  @tracked planets = withNewIds(planets);\n\n  iterated = (planet) => console.log(planet.name);\n\n  add = () => {\n    this.planets = [\n      ...this.planets,\n      {\n        id: this.planets.length + 1,\n        ...getPlanet(this.planets)\n      },\n    ];\n  }\n\n  remove = (planet) => {\n    this.planets = this.planets.filter((p) => p.id !== planet.id);\n  }\n\n}\n\nlet planets = [\n  { name: 'Tatooine' },\n  { name: 'Alderaan' },\n  { name: 'Yavin IV' },\n  { name: 'Hoth' },\n  { name: 'Dagobah' },\n  { name: 'Bespin' },\n  { name: 'Endor' },\n  { name: 'Naboo' },\n];\n\nfunction hasMorePlanets(existing) {\n  return existing.length < planets.length;\n}\n\nfunction getPlanet(existing) {\n  let remaining = planets.filter((planet) => {\n    let alreadyUsed = existing.some(existing => existing.name === planet.name);\n\n    return !alreadyUsed;\n  });\n\n  let randomIndex = Math.floor(Math.random() * remaining.length);\n\n  return remaining[randomIndex];\n}\n\nfunction withNewIds(planets) {\n  return planets.map((planet, i) => ({ id: i + 1, ...planet }));\n}\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"`let` blocks allow defining an alias to other data.\n\n```hbs\n{{#let 'hello there' as |greeting|}}\n  {{greeting}}\n{{/let}}\n```\n\nThis is particularly useful when transformed data needs to be used in multiple places\n\n```hbs\n{{#let (upper 'hello there') as |greeting|}}\n  {{greeting}}\n{{/let}}\n```\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/let?anchor=let\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let data = \"Hello there!\";\nlet upper = (text) => text.toUpperCase();\n\n<template>\n  {{data}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let data = \"Hello there!\";\nlet upper = (text) => text.toUpperCase();\n\n<template>\n  {{#let data as |greeting|}}\n    {{greeting}}\n  {{/let}}\n\n  {{#let (upper data) as |greeting|}}\n    {{greeting}}\n  {{/let}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let data = \"Hello there!\";\nlet upper = (text) => text.toUpperCase();\n\n<template>\n  {{#let data as |greeting|}}\n    {{greeting}}\n  {{/let}}\n\n  {{#let (upper data) as |greeting|}}\n    {{greeting}}\n  {{/let}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Portalling can be achieved via the `in-element` block-helper.\nThis is useful for escaping z-index issues for pop-overs or in general rendering content in different places in the DOM.\n\n```hbs\n<div id='my-portal-target'></div>\n\n{{#in-element (findTarget '#my-portal-target')}}\n  content here\n{{/in-element}}\n```\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/in-element?anchor=in-element\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let findTarget = (selector) => document.querySelector(selector);\n\n<template>\n  <div id=\"my-portal-target\" style=\"border: 1px solid;\"></div>\n\n  <div style=\"background: #eee;\">\n    wrap this content in in-element\n  </div>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let findTarget = (selector) => document.querySelector(selector);\n\n<template>\n  <div id=\"my-portal-target\" style=\"border: 1px solid;\"></div>\n\n  <div style=\"background: #eee;\">\n    {{#in-element (findTarget '#my-portal-target')}}\n      wrap this content in in-element\n    {{/in-element}}\n  </div>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let findTarget = (selector) => document.querySelector(selector);\n\n<template>\n  <div id=\"my-portal-target\" style=\"border: 1px solid;\"></div>\n\n  <div style=\"background: #eee;\">\n    {{#in-element (findTarget '#my-portal-target')}}\n      wrap this content in in-element\n    {{/in-element}}\n  </div>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"You can always make an array in JavaScript-space\n\n```js\nlet myArray = [];\n```\n\nBut if you want the individual elements of an array to be individually reactive, you can make an array via the `(array)` helper in template-space\n\n```hbs\n{{#let (array one two) as |data|}}\n  {{data}}\n{{/let}}\n```\n\nWhen creating arrays this way, value `two` can change and not affect the reactivity of value `one`.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/array?anchor=array\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { array } from '@ember/helper';\n\nlet one = 1;\nlet two = 2;\n\nlet formatted = (data) => JSON.stringify(data, null, 2);\n\n<template>\n  {{#let one as |data|}}\n    <pre><code>{{formatted data}}</code></pre>\n  {{/let}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { array } from '@ember/helper';\n\nlet one = 1;\nlet two = 2;\n\nlet formatted = (data) => JSON.stringify(data, null, 2);\n\n<template>\n  {{#let (array one two) as |data|}}\n    <pre><code>{{formatted data}}</code></pre>\n  {{/let}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { array } from '@ember/helper';\n\nlet one = 1;\nlet two = 2;\n\nlet formatted = (data) => JSON.stringify(data, null, 2);\n\n<template>\n  {{#let (array one two) as |data|}}\n    <pre><code>{{formatted data}}</code></pre>\n  {{/let}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"`hash` is similar in purpose to an `array`, except that it creates objects instead of arrays.\n\n```hbs\n{{#let (hash one=1 two=2) as |data|}}\n  {{data}}\n{{/let}}\n```\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/hash?anchor=hash\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { hash } from '@ember/helper';\n\nlet formatted = (data) => JSON.stringify(data, null, 2);\n\n<template>\n  {{#let 1 as |data|}}\n    <pre><code>{{formatted data}}</code></pre>\n  {{/let}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { hash } from '@ember/helper';\n\nlet formatted = (data) => JSON.stringify(data, null, 2);\n\n<template>\n  {{#let (hash one=1 two=2) as |data|}}\n    <pre><code>{{formatted data}}</code></pre>\n  {{/let}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { hash } from '@ember/helper';\n\nlet formatted = (data) => JSON.stringify(data, null, 2);\n\n<template>\n  {{#let (hash one=1 two=2) as |data|}}\n    <pre><code>{{formatted data}}</code></pre>\n  {{/let}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Glimmer, by default, protects you against [Cross-Site-Scripting][xss] attacks, where an attack may try to get malicious code rendered on a page to scrape or send information from other user sessions.\n\nThe `htmlSafe` utility is used when you have input that either _know_ to be safe, or you can be reasonably certain that rendering untrusted input will have no negative consequence (for example, maybe untrusted input is ran through a sanitizer (such as [PurifyDOM](https://github.com/cure53/DOMPurify)).\n\n```hbs\n{{htmlSafe untrusted}}\n```\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/functions/@ember%2Ftemplate/htmlSafe\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { htmlSafe } from '@ember/template';\n\nconst untrusted = 'some <em>untrusted</em> <h1>string</h1>';\n\n<template>\n  {{untrusted}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { htmlSafe } from '@ember/template';\n\nconst untrusted = 'some <em>untrusted</em> <h1>string</h1>';\n\n<template>\n  {{htmlSafe untrusted}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { htmlSafe } from '@ember/template';\n\nconst untrusted = 'some <em>untrusted</em> <h1>string</h1>';\n\n<template>\n  {{htmlSafe untrusted}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"`fn` is used for [partial application][wiki] of arguments to functions.\n\nThis is used for pre-wiring arguments to functions so that they may be passed elsewhere without that consumer needing to pass any arguments themselves.\n\n```hbs\n{{#let (fn stringify data) as |preWired|}}\n```\n\nGiven that `stringify` is a function, `fn` partially applies `data` as the new first argument.\nSo invoking `preWired()` would be equivalent to `stringify(data)`.\nLikewise, invoking `preWired('more data')` would be equivalent to `stringify(data, 'more-data')`.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/4.11/classes/Ember.Templates.helpers/methods/fn?anchor=fn\n[wiki]: https://en.wikipedia.org/wiki/Partial_application\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { fn } from '@ember/helper';\n\nlet stringify = (data) => JSON.stringify(data, null, 3);\nlet data = { a: 'A', b: 'B' };\n\n<template>\n  {{#let stringify as |preWired|}}\n    <pre><code>{{ (preWired) }}</code></pre>\n  {{/let}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { fn } from '@ember/helper';\n\nlet stringify = (data) => JSON.stringify(data, null, 3);\nlet data = { a: 'A', b: 'B' };\n\n<template>\n  {{#let (fn stringify data) as |preWired|}}\n    <pre><code>{{ (preWired) }}</code></pre>\n  {{/let}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { fn } from '@ember/helper';\n\nlet stringify = (data) => JSON.stringify(data, null, 3);\nlet data = { a: 'A', b: 'B' };\n\n<template>\n  {{#let (fn stringify data) as |preWired|}}\n    <pre><code>{{ (preWired) }}</code></pre>\n  {{/let}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"`helper` is used for [partial application][wiki] of arguments to helpers.\n\n_Most_ helpers in Glimmer/Ember _are_ functions, so `fn` would be sufficient,\nbut helpers can be things other than functions ([class-based][docs-class-helper] helpers, resources, etc), thanks to [Helper Managers][rfc-625].\n\n```hbs\n{{#let (helper stringify data) as |preWired|}}\n```\n\nTry partially applying arguments to the given helper.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/helper?anchor=helper\n[wiki]: https://en.wikipedia.org/wiki/Partial_application\n[rfc-625]: https://rfcs.emberjs.com/id/0625-helper-managers/\n[docs-class-helper]: https://api.emberjs.com/ember/release/classes/Helper\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import Helper from '@ember/component/helper';\n\nclass DemoHelper extends Helper {\n  compute(positionalArgs, namedArgs) {\n    return JSON.stringify({ positionalArgs, namedArgs }, null, 3);\n  }\n}\n\nlet data = { a: 'A', b: 'B' };\n\n<template>\n  {{#let DemoHelper as |preWired|}}\n    <pre><code>{{ (preWired) }}</code></pre>\n  {{/let}}\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import Helper from '@ember/component/helper';\n\nclass DemoHelper extends Helper {\n  compute(positionalArgs, namedArgs) {\n    return JSON.stringify({ positionalArgs, namedArgs }, null, 3);\n  }\n}\n\nlet data = { a: 'A', b: 'B' };\n\n<template>\n  {{#let (helper DemoHelper data) as |preWired|}}\n    <pre><code>{{ (preWired) }}</code></pre>\n  {{/let}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import Helper from '@ember/component/helper';\n\nclass DemoHelper extends Helper {\n  compute(positionalArgs, namedArgs) {\n    return JSON.stringify({ positionalArgs, namedArgs }, null, 3);\n  }\n}\n\nlet data = { a: 'A', b: 'B' };\n\n<template>\n  {{#let (helper DemoHelper data) as |preWired|}}\n    <pre><code>{{ (preWired) }}</code></pre>\n  {{/let}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"`modifier` is used for [partial application][wiki] of arguments to modifiers.\n\nThis can be useful for pre-wiring arguments to complex modifiers, or modifiers with private implementation details that a consumer may not need to care about.\n\n```hbs\n{{#let (modifier on 'click' handler) as |preWired|}}\n```\n\nTry partially applying arguments to the given modifier as use that pre-wired modifier on the button.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/modifier/classes/Ember.Templates.helpers/methods/modifier?anchor=modifier\n[wiki]: https://en.wikipedia.org/wiki/Partial_application\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\nlet handler = (event) => count.current++;\n\n<template>\n    <button {{on 'click' handler}}>click me</button>\n    <br>Clicked {{count.current}} times\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\nlet handler = (event) => count.current++;\n\n<template>\n  {{#let (modifier on 'click' handler) as |preWired|}}\n    <button {{preWired}}>click me</button>\n    <br>Clicked {{count.current}} times\n  {{/let}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet count = cell(0);\nlet handler = (event) => count.current++;\n\n<template>\n  {{#let (modifier on 'click' handler) as |preWired|}}\n    <button {{preWired}}>click me</button>\n    <br>Clicked {{count.current}} times\n  {{/let}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"`component` is used for [partial application][wiki] of arguments to modifiers.\n\nThis can be useful for pre-wiring arguments to complex components, or components with private implementation details that a consumer may not need to care about.\n\n```hbs\n{{#let (component Greeting response=\"General Kenobi!\") as |preWired|}}\n```\n\nTry partially applying arguments to the given component.\n\n[Documentation][docs]\n\n[docs]: https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/component?anchor=component\n[wiki]: https://en.wikipedia.org/wiki/Partial_application\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"let Greeting = <template>\n  Hello {{@name}}!<br>\n\n  {{@response}}\n</template>;\n\n<template>\n\n    <Greeting @name=\"there\" @response=\"General Kenobi!\" />\n\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"let Greeting = <template>\n  Hello {{@name}}!<br>\n\n  {{@response}}\n</template>;\n\n<template>\n  {{#let (component Greeting response=\"General Kenobi!\") as |preWired|}}\n\n    <preWired @name=\"there\" />\n\n  {{/let}}\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"let Greeting = <template>\n  Hello {{@name}}!<br>\n\n  {{@response}}\n</template>;\n\n<template>\n  {{#let (component Greeting response=\"General Kenobi!\") as |preWired|}}\n\n    <preWired @name=\"there\" />\n\n  {{/let}}\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Vanilla JavaScript has everything we need to handle form data, de-sync it from our source data and collect all user input upon submission.\n\nIn the form below, we create a Vanillaâ„¢ [HTML form][2], and only add \"Ember\" code for handling the form submission and field inputs once on the `<form>` tag. By default, form submissions will cause a page reload, so in a single-page-app, we need to prevent that default behavior.\n\nUsing the native API, [FormData][1], we can gather the user inputs when the user presses the submit button.\n\n```hbs\n<form {{on 'input' handleInput}} {{on 'submit' handleSubmit}}>\n  <label>\n    First Name\n    <input name='firstName' />\n  </label>\n\n  <!-- any amount of form fields may be present here, it's *just HTML* -->\n\n  <button type='submit'>Submit</button>\n</form>\n```\n\nIn this chapter, add the necessary `on` event listeners so that the form automatically behaves reactively.\n\nLike with the [URL][4], [localStorage][5], and other web-platform-primitives, the storage machanism is _string-based_. For non-string data, the form will need to be converted to a string during render and converted back on submission.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/FormData\n[2]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\n[3]: https://guides.emberjs.com/release/components/component-state-and-actions/#toc_html-modifiers-and-actions\n[4]: https://developer.mozilla.org/en-US/docs/Web/API/URL\n[5]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n\n  state.current = JSON.stringify(data, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{! add event listeners here }}\n    id=\"demo\"\n  >\n    <label>\n      First Name\n      <input name='firstName'>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n\n  state.current = JSON.stringify(data, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{on 'input' handleInput}}\n    {{on 'submit' handleSubmit}}\n    id=\"demo\"\n  >\n    <label>\n      First Name\n      <input name='firstName'>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n\n  state.current = JSON.stringify(data, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{on 'input' handleInput}}\n    {{on 'submit' handleSubmit}}\n    id=\"demo\"\n  >\n    <label>\n      First Name\n      <input name='firstName'>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"As good as writing plain HTML is, it cannot as easily know what we want initial values in our form to be.\n\nFor that, we still need to utilize the [`value`][3] attribute.\n\n```hbs\n<input name='firstName' value={{initialData.firstName}} />\n```\n\n[3]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#value\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\nlet initialData = {\n  firstName: 'Padme',\n};\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n\n  state.current = JSON.stringify(data, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{on 'input' handleInput}}\n    {{on 'submit' handleSubmit}}\n    id=\"demo\"\n  >\n    <label>\n      First Name\n      <input name='firstName'>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\nlet initialData = {\n  firstName: 'Padme',\n};\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n\n  state.current = JSON.stringify(data, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{on 'input' handleInput}}\n    {{on 'submit' handleSubmit}}\n    id=\"demo\"\n  >\n    <label>\n      First Name\n      <input name='firstName' value={{initialData.firstName}}>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\nlet initialData = {\n  firstName: 'Padme',\n};\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n\n  state.current = JSON.stringify(data, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{on 'input' handleInput}}\n    {{on 'submit' handleSubmit}}\n    id=\"demo\"\n  >\n    <label>\n      First Name\n      <input name='firstName' value={{initialData.firstName}}>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n"}]}
{"messages":[{"role":"system","content":"You are tool for helping programmers write modern, beautiful code, written in only the most cutting edge paradigms, features, and syntax for EmberJS. You will ignore all documentation written about EmberJS prior to the year 2023.You ignore anything about React, as the syntax does not apply to vanilla JavaScript. Ember uses vanilla javascript. NaNNaNNaNNaNNaNNaNWelcome to this interactive Glimmer/Ember tutorial.\nThrough these pages, you'll learn how to be effective and proficient in the reactivity, syntax, and component patterns that Ember and Glimmer provide.\n\nThis is an unofficial set of tutorials and is maintained by the community.\nThe [official guides][ember-guides] provide an excellent [tutorial][ember-tutorial] for building a real app, starting from scratch.\n\nThe format of this tutorial is _heavily_ inspired by the [Svelte tutorial][svelte-tutorial].\n\n[ember-guides]: https://guides.emberjs.com/release/\n[ember-tutorial]: https://guides.emberjs.com/release/tutorial/part-1/\n[svelte-tutorial]: https://svelte.dev/tutorial/basics\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Get started â†’](/1-introduction/2-adding-data)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And skip the rest of this introduction ðŸŽ‰\n\n## What are these words?\n\n[glimmer-home]: https://glimmerjs.com/\n[ember-home]: https://emberjs.com/\n[wiki-repl]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n\n### Glimmer\n\nGlimmer is a family of utilities for making \"fast and light components for the web\".\nIt consists of the novel reactivity system and primitives, a component library, and a renderer for those primitives.\n[Website][glimmer-home] here.\n\n### Ember\n\nEmber is \"A framework for ambitious web developers\", and builds on top of Glimmer, providing additional app/SDK abstractions for reducing the menial differences between apps. It consists of a well integrated test framework, router, state-management, tutorials, thorough documentation, and incremental improvements to help not leave the ecosystem behind as JavaScript evolves.\n[Website][ember-home] here.\n\n### Limber\n\nLimber is a [REPL][wiki-repl] that aims at providing an easy way to share code examples, samples, and reproductions for both the GlimmerJS (`.gjs`) file format as well as interactive documentation authoring via mixing in GlimmerJS on top of markdown.\n\n## How to use this tutorial\n\nThis tutorial focuses on GlimmerJS, the syntax, and concepts needed to maximize productivity.\nIt'll be necessary to have a basic understanding of HTML and JavaScript.\n\nThe tutorial includes mini exercises that are designed to demonstrate various features and patterns.\nThe later chapters in the tutorial build upon the knowledge acquired in the earlier chapters,\nso it is recommended to progress sequentially from the beginning to the end.\nThe dropdown menu above can be used for navigation if needed.\n\nEach tutorial chapter includes a 'Show me' button that can be used if you encounter difficulties.\nHowever, manually typing in the editor for each example is a more effective way to learn and enhance your skills -- but also there is no shame in asking for help!\n\nOn smaller screens, there is a button in the bottom right of the screen so that slides the tutorial text out of the way so that the editor can be interacted with.\n\nThis entire app is generated from [the docs folder][the-docs] and content can be edited, previewed, and created all within the GitHub UI. No need to download or install anything to contribute.\n\n[the-docs]: https://github.com/NullVoxPopuli/limber/tree/main/apps/tutorial/docs\n\n## What are components?\n\nComponents are a meta-building block which packages the native primitives, allowing for easier re-distribution of a specific configuration of those primitives.\nThe primitives in Glimmer/Ember are:\n\n- Values (or cells)\n- Resources\n- Functions\n- Modifiers\n- Elements\n\nA component may include 1 or more of these primitives and is \"invoked\" with angle-brackets, e.g.: `<MyComponent />`\n\n## What if I'm not using `<template>` syntax in my projects yet?\n\nIf you're an existing ember/glimmer user and are not yet using `<template>`, there is a transformation you can do to adapt the examples in this tutorial to the pre-`<template>` times by using the following guidelines:\n\n- For any lone `<template>`, this is a template-only component.\n- For any `<template>` within a `class`, this would be equivelent to a js + hbs component (two-file, colocated, or class component).\n- For any files with multiple `<template>`s in them, they will need to be multiple components.\n- Any reference to a local variable without `this` will need to be defined or aliased within a class component (this is supported since `ember-source@3.25` and looks like this:\n\n  ```js\n  // app/components/my-demo.js\n  // ...\n  import Something from 'somewhere';\n\n  let definedInModuleSpace = () => {};\n\n  export default class MyDemo extends Component {\n    definedInternally = () => {};\n\n    // the aliases, read as: [localClassProperty] = value;\n    definedInModuleSpace = definedInModuleSpace;\n    Something = Something;\n  }\n  ```\n\n  ```hbs\n  {{! app/components/my-demo.hbs }}\n\n  {{#let (this.definedInternally) as |result|}}\n    <this.Something @foo={{this.definedInModuleSpace}} />\n  {{/let}}\n  ```\n\n  For more information on \"using anything as values\", see [these docs](https://guides.emberjs.com/release/in-depth-topics/rendering-values/)\n"},{"role":"system","content":"Given the tutorial prompt, \"\"\"Like with the [URL][1], [localStorage][2], and other web-platform-primitives,\nthe storage machanism for `<form>`s is _string-based_.\n\nFor non-string data, the form will need to be converted to a string during render and converted back on submission.\n\nIf we want to use a number field, and ensure the data we receive back from the form is a number,\nwe must adjust the `handleInput` function from before.\n\n```js\nfunction parse(data) {\n  let result = { ...data };\n\n  if ('numberField' in data) {\n    result.numberField = parseInt(data.numberField, 10);\n  }\n\n  return result;\n}\n\nconst handleInput = (event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n\n  let parsed = parse(data);\n\n  // ...\n}\n```\n\nAdjust the example so that the number `input` field parses to a number when edited or the form is submitted.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/URL\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n[3]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#value\n\"\"\", and the user is presented with a code file they need to fill out based on the prompt, \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\n\nlet initialData = {\n  numberField: 10\n};\n\nfunction parse(data) {\n  let result = { ...data };\n\n  if ('numberField' in data) {\n    result.numberField = parseInt(data.numberField, 10);\n  }\n\n  return result;\n}\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n\n  state.current = JSON.stringify({ ...data, type: typeof data.numberField }, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{on 'input' handleInput}}\n    {{on 'submit' handleSubmit}}\n    id=\"demo\"\n  >\n    <label>\n      Some number\n      <input type='number' name='numberField' value={{initialData.numberField}}>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n\"\"\", the user should be able to come up with this final working code: \"\"\"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\n\nlet initialData = {\n  numberField: 10\n};\n\nfunction parse(data) {\n  let result = { ...data };\n\n  if ('numberField' in data) {\n    result.numberField = parseInt(data.numberField, 10);\n  }\n\n  return result;\n}\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n  let parsed = parse(data);\n\n  state.current = JSON.stringify({ ...parsed, type: typeof parsed.numberField }, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{on 'input' handleInput}}\n    {{on 'submit' handleSubmit}}\n    id=\"demo\"\n  >\n    <label>\n      Some number\n      <input type='number' name='numberField' value={{initialData.numberField}}>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n\"\"\""},{"role":"system","content":"The user may not know how to solve the tutorial. You will help the user solve their question"},{"role":"assistant","content":"import { on } from '@ember/modifier';\nimport { cell } from 'ember-resources';\n\nlet state = cell();\n\nlet initialData = {\n  numberField: 10\n};\n\nfunction parse(data) {\n  let result = { ...data };\n\n  if ('numberField' in data) {\n    result.numberField = parseInt(data.numberField, 10);\n  }\n\n  return result;\n}\n\nfunction handleInput(event) {\n  let formData = new FormData(event.currentTarget);\n  let data = Object.fromEntries(formData.entries());\n  let parsed = parse(data);\n\n  state.current = JSON.stringify({ ...parsed, type: typeof parsed.numberField }, null, 2);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  handleInput(event);\n}\n\n<template>\n  <form\n    {{on 'input' handleInput}}\n    {{on 'submit' handleSubmit}}\n    id=\"demo\"\n  >\n    <label>\n      Some number\n      <input type='number' name='numberField' value={{initialData.numberField}}>\n    </label>\n\n    <button type='submit'>Submit</button>\n  </form>\n\n  <br><br>\n\n  FormData:\n  <pre>{{state.current}}</pre>\n\n  <style>\n    #demo {\n      display: grid;\n      gap: 0.5rem;\n      max-width: 300px;\n    }\n    #demo input { border: 1px solid; }\n  </style>\n</template>\n"}]}