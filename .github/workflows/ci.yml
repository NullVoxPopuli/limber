name: CI
on:
  pull_request:
  push:
    branches: [main]

env:
  app: frontend/
  codemirror: packages/codemirror/
  consts: packages/consts/
  horizon: packages/horizon-theme/
  monaco: packages/monaco
  sw: packages/transpilation/
  NODE_OPTIONS: "--max-old-space-size=4096 --trace-warnings --unhandled-rejections=strict"

jobs:

##############################################################

  install_dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v3
    - uses: volta-cli/action@v1
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn install

##############################################################

  pre_build:
    name: Pre Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [install_dependencies]

    steps:
    - uses: actions/checkout@v3
    - uses: volta-cli/action@v1
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - uses: actions/cache@v2
      with:
        path: '**/dist'
        key: ${{ runner.os }}-modules-${{ hashFiles('packages/**') }}
    - run: yarn build

##############################################################

  build_app:
    name: Build App
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pre_build]

    steps:
    - uses: actions/checkout@v3
    - uses: volta-cli/action@v1
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - uses: actions/cache@v2
      with:
        path: '**/dist'
        key: ${{ runner.os }}-modules-${{ hashFiles('packages/**') }}
    - name: 'Build'
      run: yarn workspace limber build
    - name: Copy deploy host config
      run: cp ./config/netlify/_redirects ./dist/
      working-directory: ${{ env.app }}

    - name: Upload App Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: built_app
        path: ${{ env.app }}/dist/

##############################################################

  build_tests:
    name: Build Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pre_build]

    steps:
    - uses: actions/checkout@v3
    - uses: volta-cli/action@v1
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - uses: actions/cache@v2
      with:
        path: '**/dist'
        key: ${{ runner.os }}-modules-${{ hashFiles('packages/**') }}
    - run: yarn ember build --environment=development
      working-directory: ${{ env.app }}

    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: built_tests
        path: ${{ env.app }}/dist/

##############################################################

  tests:
    name: Tests
    strategy:
      matrix:
        # os: [ubuntu-latest, macOS-latest, windows-latest]
        # browsers: [chrome, firefox, safari, edge]
        ci_browser:
        - Chrome
        - Firefox

    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build_tests]

    steps:
    - uses: actions/checkout@v3
    - uses: volta-cli/action@v1
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - name: Download Built Test Artifacts
      uses: actions/download-artifact@master
      with:
        name: built_tests
        path: ${{ env.app }}/dist/
    - name: Environment Info
      run: |
        firefox --version
        google-chrome --version
        echo "Node: $( node --version )"
        echo "NPM: $( npm --version )"
        echo "Yarn: $( yarn --version )"

    - name: Test
      run: yarn test:ember --path ./dist/
      working-directory: ${{ env.app }}
      env:
        CI_BROWSER: ${{ matrix.ci_browser }}

  browserstack-test:
    name: Browserstack Tests (Safari, Edge, etc)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build_tests]

    env:
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}

    steps:
    - uses: actions/checkout@v3
    - uses: volta-cli/action@v1
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - name: Download Built Test Artifacts
      uses: actions/download-artifact@master
      with:
        name: built_tests
        path: ${{ env.app }}/dist/
    - run: yarn browserstack:connect
      working-directory: ${{ env.app }}
    - run: yarn test:browserstack
      working-directory: ${{ env.app }}
    - run: yarn browserstack:results
      working-directory: ${{ env.app }}
    - run: yarn browserstack:disconnect
      working-directory: ${{ env.app }}

##############################################################

  deploy:
    name: "Deploy: Production"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build_app, tests, browserstack-test]

    steps:
    - uses: actions/checkout@v3
    - uses: volta-cli/action@v1
    - name: Download Built App Artifacts
      uses: actions/download-artifact@master
      with:
        name: built_app
        path: ${{ env.app }}/deploy/app/

    - name: Deploy to Netlify
      env:
        NETLIFY_ACCESS_TOKEN: ${{ secrets.NETLIFY_ACCESS_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_CLI_VERSION: 0.4.0
      run: |
        cp ./config/netlify/_redirects ./deploy/app

        wget https://github.com/netlify/netlifyctl/releases/download/v$NETLIFY_CLI_VERSION/netlifyctl-linux-amd64-$NETLIFY_CLI_VERSION.tar.gz
        tar -xf netlifyctl-linux-amd64-$NETLIFY_CLI_VERSION.tar.gz

        ./netlifyctl -y deploy --site-id $NETLIFY_SITE_ID --access-token $NETLIFY_ACCESS_TOKEN --publish-directory "./deploy/app"
      working-directory: ${{ env.app }}

##############################################################

  deploy_preview:
    name: "Deploy: Branch"
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build_app]

    steps:
    - uses: actions/checkout@v3
    - uses: volta-cli/action@v1

    - name: Download Built App Artifacts
      uses: actions/download-artifact@master
      with:
        name: built_app
        path: ${{ env.app }}/deploy/app/

    - name: Deploy to Netlify
      id: deploy
      uses: nwtgck/actions-netlify@v1.2.3
      with:
        publish-dir: '${{ env.app }}/deploy/app'
        production-branch: __handled_separately__
        github-token: ${{ secrets.GITHUB_TOKEN }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_ACCESS_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - run: echo "${{ steps.deploy.outputs.deploy-url }}" > deploy-url.txt

    - name: Upload URL as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: deploy-url
        path: deploy-url.txt

